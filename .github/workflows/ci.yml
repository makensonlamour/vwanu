name: Continuos integration
on:
  pull_request:
    branches: [development, master]
  push:
    branches: [development, master]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Running checkout
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1.3
        with:
          OAUTH_REDIRECT_URL: ${{secrets.OAUTH_REDIRECT_URL}}
          GOOGLE_KEY: ${{secrets.GOOGLE_KEY}}
          GOOGLE_SECRET: ${{secrets.GOOGLe_SECRET}}
          directory: server/
          file_name: .env
          fail_on_empty: true
      # - name: Cache node_modules
      #   if: github.event_name == 'pull_request'
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-
      - name: Use NodeJS
        if: github.event_name == 'pull_request'
        uses: actions/setup-node@v1
        with:
          node-version: '16.6.1'

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-
      - name: Installing basic Dependencies
        if: github.event_name == 'pull_request'
        run: npm ci --ignore-scripts
      - name: Installing all the dependencies
        if: github.event_name == 'pull_request'
        run: npm run install-all-deps
      - name: Running docker
        if: github.event_name == 'pull_request'
        run: docker-compose -f docker-compose.react.yml up -d

      - name: Check linting
        if: github.event_name == 'pull_request'
        run: npm run lint
      - name: Testing ðŸ¥¶
        if: github.event_name == 'pull_request'
        run: npm test
        env:
          CI: true
      - name: Upload Test Coverage
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v1
        with:
          name: server-code-coverage
          path: ./server/coverage

      - name: Build Project
        if: github.event_name == 'pull_request'
        run: npm run build
      - name: Upload server Build Folder
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v1
        with:
          name: server-build-folder
          path: ./server/build
      - name: Upload client Build Folder
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v1
        with:
          name: client-build-folder
          path: ./client/build
      # - name: ZIP Assets
      #   if: github.event_name == 'pull_request' && github.base_ref == 'master'
      #   run: |
      #     zip -r build.zip ./build
      #     zip -r coverage.zip ./coverage
      # - name: Create a Release
      #   if: github.event_name == 'pull_request' && github.base_ref == 'master'
      #   run: npx semantic-release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.TOKEN }}

      - name: Deploy to Staging
        if: github.event_name == 'push' && github.ref == 'refs/heads/development'
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{secrets.STAGING_SSH_HOST}}
          key: ${{secrets.STAGING_SSH_KEY}}
          username: ${{secrets.STAGING_SSH_USERNAME}}

          script: |
            cd vwanu
            #git checkout development
            git pull
            #docker-compose down 
            # docker-compose -f docker-compose.stage.yml build
            docker-compose -f docker-compose.nginx.yml up --build -d

      - name: Deploy to Production
        if: github.event_name == 'push' && github.base_ref == 'master'
        run: echo deployed to production test
      # - name: Upload Coverage Reports
      #   if: github.event_name == 'push' && github.base_ref == 'master'
      #   run: npx codecov
      #   env:
      #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Open Issue
        if: failure() && github.event_name == 'pull_request'
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/issues \
          --header 'authorization: Bearer ${{ secrets.TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "title": "Automated issue for commit: ${{ github.sha }}",
            "body": "This issue was automatically created by the GitHub Action workflow **${{ github.workflow }}**. \n\n The commit hash was: _${{ github.sha }}_.",
            "assignees": ["${{ github.event.pull_request.user.login }}"]
            }'
